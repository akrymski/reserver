#!/usr/bin/env node

/*

 ______ _______ _______ _______  ______ _    _ _______  ______
|_____/ |______ |______ |______ |_____/  \  /  |______ |_____/
|    \_ |______ ______| |______ |    \_   \/   |______ |    \_
                                                              

Designed, built, and released under MIT license by @akrymski. Learn more at
https://github.com/akrymski/reserver

*/

// Some mac users might need this:
module.paths.push('/usr/local/lib/node_modules');

var path    = require('path');
var fs      = require('fs');
var express = require('express');
var program = require('commander');

program
  .version('0.0.1')
  .usage('[options] ./src ./www')
  .option('-p, --port [int]', 'Port', 3000)
  .parse(process.argv);

if (program.args.length < 1) return program.help();

var DIR     = path.join(path.dirname(fs.realpathSync(__filename)));
var PORT    = program.port || 3000;
var SRC     = fs.realpathSync(program.args[0]);
var DEST    = program.args.length > 1 ? fs.realpathSync(program.args[1]) : DIR;

var CONFIG  = {
  '/html' : DEST + '/index.html',
  '/css' : DEST + '/index.css',
  '/js' : DEST + '/index.js'
}

var LOGGER = ";var __log = console.log;console.log = function() {__log.apply(this, arguments);var xhr = new XMLHttpRequest();xhr.open('POST', '/__log?v=' + encodeURIComponent(JSON.stringify([].map.call(arguments,function(v){return v && v.tagName ? v.tagName:v}))));xhr.send(null);};"

var builders = {
  coffee: function(f, fn) {
    var coffeeify = require('coffeeify');
    require('browserify')({
      entries: f,
      debug: true
    }).transform(coffeeify).deps({transform: [coffeeify]}).bundle(fn);
  },
  js: function(f, fn) {
    require('browserify')({
      entries: f,
      debug: true
    }).bundle(fn);
  },
  less: function(f, fn) {
    require('less').render(fs.readFileSync(f).toString(), {
      filename: 'index.less',
      paths: [path.dirname(f)],
      compress: true
    }, function (err, res) {
      if (err) fn(err);
      else fn(null, res.css);
    });
  },
  styl: function(f, fn) {
    require('stylus').render(fs.readFileSync(f).toString(), {
      filename: 'index.less',
      paths: [path.dirname(f)],
      compress: true
    }, function (err, res) {
      if (err) fn(err);
      else fn(null, res);
    });
  },
  ejs: function(f, fn) {
    try {
      var html = require('ejs').render(fs.readFileSync(f).toString());
      fn(null, html);
    } catch (err) {
      fn(err);
    }
  },
  jade: function(f, fn) {
    try {
      var html = require('jade').render(fs.readFileSync(f).toString());
      fn(null, html);
    } catch (err) {
      fn(err);
    }
  },
  hb: function(f, fn) {
    try {
      var html = require('handlebars').compile(fs.readFileSync(f).toString())({});
      fn(null, html);
    } catch (err) {
      fn(err);
    }
  },
  html: function(f, fn) {
    fn(null, fs.readFileSync(f).toString());
  },
  css: function(f, fn) {
    fn(null, fs.readFileSync(f).toString());
  }
}

function build(src, dest, fn) {
  for (var ext in builders) {
    var f = src + '/index.' + ext;
    if (fs.existsSync(f)) {
      builders[ext].call(this, f, fn);
    }
  }
}

var app = express();
var files = { js: '', css: '' }

function sendError(err, res) {
  res.send('<html><body><pre>'+err+'</pre></body>');
}

app.get('/', function (req, res) {
  var err;
  build(SRC + '/css', CONFIG['/css'], function(err, r) {
    if (err) return sendError(err, res);
    files.css = r;
    build(SRC + '/js', CONFIG['/js'], function(err, r) {
      if (err) return sendError(err, res);
      files.js = r;
      build(SRC + '/html', CONFIG['/html'], function(err, r) {
        if (err) return sendError(err, res);
        res.send(r);
      })
    })
  })
});

app.get('/index.js', function(req, res) {
  res.set('Content-Type', 'text/javascript').end(LOGGER + files.js);
});

app.get('/index.css', function(req, res) {
  res.set('Content-Type', 'text/css').end(files.css);
});

app.post('/__log', function(req, res) {
  var time = (new Date()).toTimeString().substring(0,9);
  console.log(time + req.query.v);
  res.send('');
});

app.use(express.static(DEST));

app.listen(PORT, function() {
  console.log('Building from ' + SRC);
  console.log('Serving static files from ' + DEST);
  console.log('Listening on port ' + PORT);
});



