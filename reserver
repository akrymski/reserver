#!/usr/bin/env node

/*

 ______ _______ _______ _______  ______ _    _ _______  ______
|_____/ |______ |______ |______ |_____/  \  /  |______ |_____/
|    \_ |______ ______| |______ |    \_   \/   |______ |    \_


Designed, built, and released under MIT license by @akrymski. Learn more at
https://github.com/akrymski/reserver

*/

// Some mac users might need this:
module.paths.push('/usr/local/lib/node_modules');

var path    = require('path');
var fs      = require('fs');
var program = require('commander');
var http    = require('http');
var send    = require('send');
var url     = require('url');
var async   = require('async');
var autoprefixer = require('autoprefixer-core');

program
  .version('0.0.1')
  .usage('[options] ./src ./www')
  .option('-p, --port [int]', 'Port', 3000)
  .parse(process.argv);

if (program.args.length < 1) return program.help();

var DIR     = path.join(path.dirname(fs.realpathSync(__filename)));
var PORT    = program.port || 3000;
var SRC     = fs.realpathSync(program.args[0]);
var DEST    = program.args.length > 1 ? fs.realpathSync(program.args[1]) : DIR;

var LOGGER = ";var __log = console.log;console.log = function() {__log.apply(this, arguments);var xhr = new XMLHttpRequest();xhr.open('POST', '/__log');xhr.send(JSON.stringify([].map.call(arguments,function(v){return v && v.tagName ? v.tagName:v})));};"

var builders = {
  coffee: function(f, fn) {
    var coffeeify = require('coffeeify');
    require('browserify')({
      entries: f,
      debug: true
    }).transform(coffeeify).deps({transform: [coffeeify]}).bundle(fn);
  },
  js: function(f, fn) {
    require('browserify')({
      entries: f,
      debug: true
    }).bundle(fn);
  },
  jsx: function(f, fn) {
    var babelify = require('babelify');
    require('browserify')({
      entries: f,
      debug: true
    }).transform(babelify, {presets: ["es2015", "react"]}).bundle(fn);
  },
  es6: function(f, fn) {
    var babelify = require('babelify');
    require('browserify')({
      entries: f,
      debug: true
    }).transform(babelify).bundle(fn);
  },
  less: function(f, fn) {
    require('less').render(fs.readFileSync(f).toString(), {
      filename: 'index.less',
      paths: [path.dirname(f)],
      compress: true
    }, function (err, res) {
      if (err) fn(err);
      else fn(null, autoprefixer.process(res.css).css);
    });
  },
  styl: function(f, fn) {
    require('stylus').render(fs.readFileSync(f).toString(), {
      filename: 'index.less',
      paths: [path.dirname(f)],
      compress: true
    }, function (err, res) {
      if (err) fn(err);
      else fn(null, res);
    });
  },
  ejs: function(f, fn) {
    try {
      var html = require('ejs').render(fs.readFileSync(f).toString());
      fn(null, html);
    } catch (err) {
      fn(err);
    }
  },
  jade: function(f, fn) {
    try {
      var html = require('jade').render(fs.readFileSync(f).toString());
      fn(null, html);
    } catch (err) {
      fn(err);
    }
  },
  hb: function(f, fn) {
    try {
      var html = require('handlebars').compile(fs.readFileSync(f).toString())({});
      fn(null, html);
    } catch (err) {
      fn(err);
    }
  },
  html: function(f, fn) {
    fn(null, fs.readFileSync(f).toString());
  },
  css: function(f, fn) {
    fn(null, fs.readFileSync(f).toString());
  }
}

function build(dir, fn) {
  for (var ext in builders) {
    var f = SRC + '/' + dir + '/index.' + ext;
    if (fs.existsSync(f)) return builders[ext].call(this, f, fn);
  }
  fn(null, null);
  //fn('No valid index file found in ' + dir);
}

var src;

http.createServer(function(req, res) {

  var time = Date.now();
  var timeString = (new Date()).toTimeString().substring(0,9);

  if (req.url === "/index.js" && src.js) {
    res.writeHead(200, { "Content-Type": "text/javascript" });
    res.end(LOGGER + src.js);
  } else if (req.url === "/index.css" && src.css) {
    res.writeHead(200, { "Content-Type": "text/css" });
    res.end(src.css);
  } else if (req.url === "/__log") {
    req.on('data', function (chunk) {
      console.log(timeString + chunk);
    });
    res.writeHead(200, { "Content-Type": "text/plain" });
    res.end('');
  } else if (req.url === "/") {

    // Set CORS headers
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Request-Method', '*');
    res.setHeader('Access-Control-Allow-Methods', 'OPTIONS, GET');
    res.setHeader('Access-Control-Allow-Headers', '*');

    if (req.method === 'OPTIONS') {
      res.writeHead(200);
      return res.end();
    }

    if (req.method === 'GET') {
      res.writeHead(200, { "Content-Type": "text/html" });
      async.map(['css', 'js', 'html'], build, function(err, results) {
        if (err) {
          console.log(timeString + 'BUILD ERROR: ' + err);
          return res.end('<html><body style="background:rgb(132, 47, 47);padding:20px"><pre style="color:#fff;font-size:14px">'+err+'</pre></body>');
        }
        console.log(timeString + 'BUILT IN ' + (Date.now()-time) + 'ms');
        src = { css: results[0], js: results[1], html: results[2] };
        res.end(src.html || fs.readFileSync(DEST + '/index.html').toString());
      });
    }

  } else send(req, url.parse(req.url).pathname, {root: DEST}).pipe(res);

}).listen(PORT);

console.log('Building from ' + SRC);
console.log('Serving static files from ' + DEST);
console.log('Listening on port ' + PORT);
